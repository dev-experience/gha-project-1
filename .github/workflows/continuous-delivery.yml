name: Continuous Delivery

on:
  workflow_dispatch:
  push:
  pull_request:
    types: [ closed ]

concurrency:
  # https://docs.github.com/en/actions/learn-github-actions/variables
  group: ${{ github.workflow_ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY_URL: ghcr.io
  DOCKER_IMAGE_NAME: ticketless-flow-app

jobs:

  docker-build:
    name: CI - Build Docker image
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - name: Build the Docker image
        working-directory: ./src
        run: docker build . --build-arg REPOSITORY_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"

  run-unit-tests:
    name: CI - Run Unit Tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: write
      pull-requests: write
    steps:

      - uses: actions/checkout@v3

      - name: Run Unit Tests
        working-directory: ./src
        run: |
          docker build . --target unit-tests-runner --tag ${DOCKER_IMAGE_NAME}-unit-tests:latest
          mkdir test_results
          docker run --mount type=bind,source="./test_results",target="/src/test_results" ${DOCKER_IMAGE_NAME}-unit-tests:latest

      - name: Create test report
        uses: dorny/test-reporter@v1
        if: ${{ !cancelled() }}
        with:
          name: Unit Tests report
          path: "./src/test_results/*.trx"
          reporter: dotnet-trx
          fail-on-error: true

  run-integration-tests:
    name: CI - Run Integration Tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: write
      pull-requests: write
    steps:

      - uses: actions/checkout@v3

      - name: Run Integration Tests
        working-directory: ./src
        run: |
          docker build . --target integration-tests-runner --tag ${DOCKER_IMAGE_NAME}-integration-tests:latest
          mkdir test_results
          docker run --mount type=bind,source="./test_results",target="/src/test_results" ${DOCKER_IMAGE_NAME}-integration-tests:latest

      - name: Create test report
        uses: dorny/test-reporter@v1
        if: ${{ !cancelled() }}
        with:
          name: Integration Tests report
          path: "./src/test_results/*.trx"
          reporter: dotnet-trx
          fail-on-error: true

  docker-build-and-push:
    name: CI - Build and push Docker image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - run-unit-tests
      - run-integration-tests
    # https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    permissions:
      contents: read
      packages: write
    steps:

      - uses: actions/checkout@v3

      - name: Build Docker image
        working-directory: ./src
        run: |
          docker build . \
            --build-arg "APP_NAME='Ticketless Flow App'" \
            --build-arg "REPOSITORY_URL='${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}'" \
            --build-arg "GITHUB_SHA='${GITHUB_SHA}'" \
            --tag ${DOCKER_IMAGE_NAME}:${GITHUB_SHA} \
            --tag ${DOCKER_IMAGE_NAME}:$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --tag ${DOCKER_IMAGE_NAME}:latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker tag ${DOCKER_IMAGE_NAME}:latest ${DOCKER_REGISTRY_URL}/${{ github.repository_owner }}/${DOCKER_IMAGE_NAME}:latest
          docker tag ${DOCKER_IMAGE_NAME}:latest ${DOCKER_REGISTRY_URL}/${{ github.repository_owner }}/${DOCKER_IMAGE_NAME}:${GITHUB_SHA}
          docker push --all-tags ${DOCKER_REGISTRY_URL}/${{ github.repository_owner }}/${DOCKER_IMAGE_NAME}

      - name: Inspect Docker image
        run: docker inspect ${DOCKER_REGISTRY_URL}/${{ github.repository_owner }}/${DOCKER_IMAGE_NAME}:latest

  run-deploy-t:
    name: CD - T - Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: Test
      url: "${{ steps.terraform_apply_t.outputs.appUrl }}/api/health"
    needs:
      - docker-build-and-push
    env:
      ENVIRONMENT: 1_test
    steps:

      - uses: actions/checkout@v3

      - name: Terraform init
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: terraform init -backend-config="./_env/$ENVIRONMENT.azurerm.tfbackend"

      - name: Terraform validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform plan
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_docker_registry_url: ${{ env.DOCKER_REGISTRY_URL }}
          TF_VAR_docker_registry_username: ${{ github.actor }}
          TF_VAR_docker_registry_password: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_docker_image_namespace: ${{ github.repository_owner }}
        run: terraform plan -var-file="./_env/$ENVIRONMENT.tfvars" -out="tfplan"

      - name: Terraform apply
        id: terraform_apply_t
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          terraform apply "tfplan"

          resourceGroupPortalUrl=$(terraform output -raw resource_group_portal_url)
          echo "resourceGroupPortalUrl = '${resourceGroupPortalUrl}'"
          echo "Deployment done to the RG: ${resourceGroupPortalUrl}" > $GITHUB_STEP_SUMMARY

          subscriptionId=$(terraform output -raw subscription_id)
          echo "subscriptionId = '${subscriptionId}'"

          appName=$(terraform output -raw app_name)
          echo "appName = '${appName}'"

          appUrl=$(terraform output -raw app_url)
          echo "appUrl = '${appUrl}'"

          # appWebhookUrl=$(terraform output -raw app_webhook_url)
          # echo "appWebhookUrl = '${appWebhookUrl}'"

          echo "subscriptionId=${subscriptionId}" >> "$GITHUB_OUTPUT"
          echo "appName=${appName}" >> "$GITHUB_OUTPUT"
          echo "appUrl=${appUrl}" >> "$GITHUB_OUTPUT"
          # echo "appWebhookUrl=${appWebhookUrl}" >> "$GITHUB_OUTPUT"

      - name: Az CLI login
        uses: azure/login@v1
        with:
          creds: |
            {
              "tenantId": "${{ vars.ARM_TENANT_ID }}",
              "subscriptionId": "${{ steps.terraform_apply_t.outputs.subscriptionId }}",
              "clientId": "${{ vars.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}"
            }

      - name: 'Run Azure Functions Container Action'
        uses: Azure/functions-container-action@v1
        with:
          app-name: ${{ steps.terraform_apply_t.outputs.appName }}
          image: ${{ env.DOCKER_REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  run-deploy-a:
    name: CD - A - Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: Acceptance
      url: "${{ steps.terraform_apply_a.outputs.appUrl }}/api/health"
    needs:
      - run-deploy-t
    env:
      ENVIRONMENT: 2_acceptance
    steps:

      - uses: actions/checkout@v3

      - name: Terraform init
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: terraform init -backend-config="./_env/$ENVIRONMENT.azurerm.tfbackend"

      - name: Terraform validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform plan
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_docker_registry_url: ${{ env.DOCKER_REGISTRY_URL }}
          TF_VAR_docker_registry_username: ${{ github.actor }}
          TF_VAR_docker_registry_password: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_docker_image_namespace: ${{ github.repository_owner }}
        run: terraform plan -var-file="./_env/$ENVIRONMENT.tfvars" -out="tfplan"

      - name: Terraform apply
        id: terraform_apply_a
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          terraform apply "tfplan"

          resourceGroupPortalUrl=$(terraform output -raw resource_group_portal_url)
          echo "resourceGroupPortalUrl = '${resourceGroupPortalUrl}'"

          appUrl=$(terraform output -raw app_url)
          echo "appUrl = '${appUrl}'"

          echo "Deployment done to the RG: ${resourceGroupPortalUrl}" > $GITHUB_STEP_SUMMARY
          echo "appUrl=${appUrl}" >> "$GITHUB_OUTPUT"

  run-deploy-p:
    name: CD - P - Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: Production
      url: "${{ steps.terraform_apply_p.outputs.appUrl }}/api/health"
    env:
      ENVIRONMENT: 3_production
    needs:
      - run-deploy-a
    steps:

      - uses: actions/checkout@v3

      - name: Terraform init
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: terraform init -backend-config="./_env/$ENVIRONMENT.azurerm.tfbackend"

      - name: Terraform validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform plan
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_docker_registry_url: ${{ env.DOCKER_REGISTRY_URL }}
          TF_VAR_docker_registry_username: ${{ github.actor }}
          TF_VAR_docker_registry_password: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_docker_image_namespace: ${{ github.repository_owner }}
        run: terraform plan -var-file="./_env/$ENVIRONMENT.tfvars" -out="tfplan"

      - name: Terraform apply
        id: terraform_apply_p
        working-directory: ./terraform
        env:
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        run: |
          terraform apply "tfplan"

          resourceGroupPortalUrl=$(terraform output -raw resource_group_portal_url)
          echo "resourceGroupPortalUrl = '${resourceGroupPortalUrl}'"

          appUrl=$(terraform output -raw app_url)
          echo "appUrl = '${appUrl}'"

          echo "Deployment done to the RG: ${resourceGroupPortalUrl}" > $GITHUB_STEP_SUMMARY
          echo "appUrl=${appUrl}" >> "$GITHUB_OUTPUT"
